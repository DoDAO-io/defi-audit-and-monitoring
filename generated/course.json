{
  "key": "defi-audit-and-monitoring",
  "title": "Audit and Monitoring",
  "summary": "This course talks about how to audit and monitor the smart contracts\n",
  "details": "In this course we first ....",
  "duration": "30 mins - 1 hour",
  "highlights": [
    "Introduction",
    "OpenZeppelin - Defender"
  ],
  "publishStatus": "Live",
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/courses/DoDAO/CourseIcons/audit_and_monitoring.png",
  "courseAdmins": [
    "0x34d014758297c00fea49935fce172677904d51ef",
    "0x2a6af0619be90d129ab0d70c10e25c097b6ec67d"
  ],
  "coursePassContent": "Pass content of Course !!!!!!!!!!",
  "topicConfig": {
    "showExplanations": true,
    "showHints": true
  },
  "topics": [
    {
      "title": "OpenZeppelin Defender",
      "key": "openzeppelin-defender",
      "details": "This chapter talks about various features offered by OpenZeppelin defender. The features of  OpenZeppelin defenders helps users to manage the smart-contract development very easily.\n",
      "order": 0,
      "explanations": [
        {
          "key": "intro-to-covers",
          "shortTitle": "Intro",
          "details": "Open Zeppelin Defender provides exceptional functionality for the management of smart contracts. Its user-friendly interface allows for the management of multiple smart contracts, the creation of proposals, and the ability to upgrade  contracts within the Defender dashboard, simplifying the process of smart contract development. Additionally, Defender offers notifications for events within the smart contract, eliminating the need for constant monitoring of Etherscan for updates.  The platform's full range of features is outlined in next sections.\n",
          "title": "Introduction to Defender"
        },
        {
          "key": "defender-admin",
          "shortTitle": "Admin",
          "details": "# Admin\n\n The Defender admin serves as a centralized platform for managing all of our smart contracts. It offers the capability to create multi-signature\n wallets instantly, which can be utilized for signing transactions and proposals. The Defender admin also enables users to perform the following\n actions:\n\n![DEFENDER](https://github.com/DoDAO-io/defi-audit-and-monitoring/blob/main/images/Admin-dashboard.png?raw=true)\n\n ### Add contract :\n- **Contract Management :**\n     Defender Admin allows us to import multiple contracts and manage them directly using the interface.\n - **Multisig wallet (Gnosis safe) :**\n     Multisignature wallets can be created instantly and can be used to sign transactions. The threshold value can also be given while creating the\n Gnosis safe.\n - **Timelocks :**\n     Timelocks are smart contracts that allow for the delay of proposals or function calls in the target contract. The individuals designated as\n proposers are responsible for scheduling and canceling operations, while executors handle the execution of these operations. The timelock contract\n itself is assigned the admin role, allowing it to manage and oversee the actions of both proposers and executors.\n\n\n ### Add Proposals :\nThe proposals can be made once the contract is added to the admin dashboard. The smart contracts can be added to the admin\n dashboard and proposals can be made directly using [Defender Admin API](https://docs.openzeppelin.com/defender/admin-api-reference) and\n [defender-admin-client](https://www.npmjs.com/package/defender-admin-client).  \n - **Upgrades :**\n The Defender Admin provides a straightforward process for upgrading smart contracts. To initiate an upgrade, the next version of the contract\n must be deployed and its deployed address must be provided in the new implementation address field within the Defender Admin. Upgradeability is\n only possible for contracts that implement the EIP-1967 standard, which is verified during the import process. Additionally, contracts can be\n upgraded in a local environment by utilizing the \"updateProxy\" function, which can be accessed by installing the OpenZeppelin package.\n - **Modifying access control :** \n The Defender Admin allows for the modification of access and roles within the platform itself. For this functionality to be available, the\n contract must have the “grantRole” and “RevokeRole” functions. If the ABI of the contract includes these functions, Defender provides the\n capability to fill them using the roles that have been previously indexed in the contract. In instances where a new role needs to be added to the\n contract, but the function and indexing have not been established, the corresponding “bytes32” of the contract can be provided to add the new\n role.\n - **Pausing and unpausing the contract :**\n The OpenZeppelin platform offers the ability to pause and resume smart contracts. This feature is implemented as a precautionary measure to\n protect the contract from potential bugs. The OpenZeppelin Defender allows for the pausing of specific functions and provides modifiers to execute\n functions while in a paused state. In order to enable this feature, the contract's ABI must include the pause() and unpause() functions. The\n Defender Admin also includes the capability to check the status of the contract and indicate whether it is currently paused by checking for the\n paused() or isPaused() function in the contract's ABI.\n\n - **Admin actions :**\n The Defender Admin allows for custom actions to be taken through the use of the admin action feature. This includes the ability to make\n function calls and create batch proposals. A batch proposal refers to a single transaction that includes multiple function calls from one or more\n contracts. This feature allows for the atomic execution of multiple actions. To utilize this functionality, it is recommended to use a multisig\n wallet as the execution strategy and ensure that all batch transactions are executed on the same network.\n",
          "title": "Defender Admin"
        },
        {
          "key": "defender-autotask",
          "shortTitle": "Autotasks",
          "details": "The defender autotask feature enables users to run javascript snippets on a schedule, or trigger them in response to sentinel events or public webhooks. The integration of autotaks with sentinel and relays makes autotasks more efficient.\n\n### Usecases of Auto Tasks\n- Withdrawing funds in a deployed contract when it reaches a certain threshold value. - Executing a particular function at a specific time or on a recurring schedule. \n- Updating on-chain oracle information by making API calls. \n- Integrating with third-party services using webhooks (HTTP calls). \n- Providing gasless transactions for dapp users via meta-transactions. \n- Executing functions or multiple functions in response to a sentinel or an event. \n- To execute a functions or many functions in response to a sentinel or an event.\n\nAuto task can be used by providing a javascript snippet and a triggering event. We can link it to the relayer. Defender currently supports two types of triggers.\n\n- **Schedule**: Choose how often you would like your Autotask to run, and Defender will make sure to invoke your function at the specified interval. Note that the specified interval is between two consecutive execution starts, not between the end of an Autotask and the beginning of the next one. This way, you can be sure that your Autotask is running as efficiently as possible!  \n- **Webhook**: Defender will create a secret URL for your Autotask, and invoke it whenever an HTTP request is posted to that endpoint. You can regenerate this URL at any time. Defender will inject the HTTP request information into your Autotask, and return the Autotask run info along with any data you return from your code.\nSentinel-triggered Autotasks cannot be executed on schedule or with a secret URL. They can only be executed from Sentinel or by manual action.\n\n### Conditions for the auto-tasking code snippet\n\n\n- The code snippet must export a handler function, which is an asynchronous function that will be invoked for each execution of the auto task. \n- Each auto task must be powered by AWS Lambda. These are server less computing the AWS will manage the execution of the code.\n\n![DEFENDER](https://github.com/DoDAO-io/defi-audit-and-monitoring/blob/main/images/Autotask-create-1.png?raw=true)\n\n![DEFENDER](https://github.com/DoDAO-io/defi-audit-and-monitoring/blob/main/images/Autotask-create-2.png?raw=true)",
          "title": "Defender Autotasks"
        },
        {
          "key": "defender-sentinel",
          "shortTitle": "Sentinel",
          "details": "# Sentinel\nSentinels Services provides a comprehensive monitoring solution for transactions on smart contracts. It allows you to establish conditions on events, functions, and transaction parameters, and detect direct calls, internal transactions, and events emitted by the contracts. Sentinels can notify you through various channels such as email, Slack, Telegram, Discord, custom webhooks and even push data to Datadog. Additionally, it also enables you to set up Autotasks to execute in response to a notification.\nThe defender sentinel offers three types of sentinels \n* Contract sentinels \n* Forta sentinels \n* Forta local sentinals\n\nSentinels can be used to monitor the transactions in the smart contract. You can specify the conditions for notification, and if the condition is met, the sentinel will notify you via email, Telegram, Discord, etc. The contract sentinel can be used to monitor a single contract, while the forta sentinel can be used to monitor multiple contracts. This gives you more flexibility than using a contract sentinel.\n\nMatching rules are also an essential part of Contract Sentinels. For a transaction to trigger a notification, it must satisfy all of the following:\n* Transaction **MUST** have a To, From, or Address (from the log) that matches the configured address  \n* The Transaction **MUST** match the **Transaction Condition** if specified.\n* If **Events** are selected :\n    * The Transaction **MUST** emit any of the selected Events and match the **Event Condition** (if any)\n* If **Functions** are selected\n    * The Transaction **MUST** directly invoke any of the selected Functions (contract calls are not detected at the moment) and match the **Function Condition** (if any)\n\nForta Sentinel is a tool that allows you to monitor alerts that come from a given Forta Bot or affect a given address, and filter those alerts by any conditions that you specify. It then notifies you when those alerts occur. This feature is particularly useful for monitoring specific detection bots and handling alerts internally instead of publishing to the network.\nA Forta Sentinel filters on Bot IDs or Addresses and requires that at least one of these filters is set. It is possible to specify multiple Bot IDs and Addresses to filter on. For a Forta Alert to trigger a notification, it must satisfy all of the following:\n\n\n* The Forta Alert MUST come from one of the Bot IDs specified and/or one of the Addresses specified. \n* If the Alert ID Condition is specified, the Alert ID from the alert MUST match one of the Alert IDs specified. \n* If the Severity Condition is specified, the Alert Severity MUST match or be of greater severity than the one specified.\n",
          "title": "Defender Sentinel"
        },
        {
          "key": "defender-relayer",
          "shortTitle": "Relay",
          "details": "The Openzeppelin Defender's relayer feature simplifies the process of making smart contract transactions by eliminating the need for private keys. Instead, transactions can be made through HTTP API calls, removing the need for managing private keys and other complexities such as transaction fees and nounces.\n\nTo utilize the relayer feature, users must first create a relayer, which will have its own private key that is kept secure and invisible to the user. Once created, the relayer will provide a secret key and API key, which must be saved as it cannot be retrieved later.\n\nWith these keys, transactions can be made through the relayer. Each relayer can have one or more API keys, and it is necessary to send Ether to the relayer to cover gas fees. The relayer will also send notifications if the balance falls below 0.1 Ether.\n\n### Use cases of Relayer  \n* Use Defender Relayer every time you use a hot wallet in your code.  \n* Connect to a Relayer instead to simplify key management and transaction submissions. \n* Use a Defender Relayer when you need to trigger a state transition in your contracts.  \n* Use a Defender Relayer to update on-chain oracles with external data.  \n* Use a Defender Relayer to send meta-transactions to build a gasless experience.  \n* Use a Defender Relayer to react to sign-ups in your app by airdropping tokens to new users.  \n* Use a Defender Relayer to sweep funds from protocol contracts to secure wallets.  \n* Use a Defender Relayer to build bots for interacting with smart contract protocols.\n",
          "title": "Defender Relay"
        },
        {
          "key": "defender-logging",
          "shortTitle": "Logging",
          "details": "# Logging\nThe Defender offers a premium feature called Logging, which allows users to view all events that occur within the Defender. This feature is particularly useful for tracking user sign-ins and sign-outs, managing teams, detecting potential attacks on infrastructure through failed sign-in attempts, and monitoring relayer activity to understand transactions being sent from accounts. Logging also facilitates audits in automating, relaying, and sentinels. The logs generated can be forwarded to other services such as Data Log or Splunk that support API key authentication.\n### Use cases of Logging \n* Use Defender Logging to monitor all changes and actions on your system  \n* Track user actions on your team by monitoring sign-ins and activity across the application  \n* Detect potential security breaches by monitoring failed sign-in attempts  \n* Track relayer activity to understand the transactions being sent from your accounts  \n* Create an audit trail of all changes to your Autotasks, Sentinels, and Relayers for compliance and security purposes.\n",
          "title": "Defender Logging"
        },
        {
          "key": "defender-advisors",
          "title": "Defender Advisors",
          "shortTitle": "Advisors",
          "details": "When it comes to securing your project, it's essential to have a clear understanding of the best practices and guidelines to follow. The OpenZeppelin team has created the Defender Advisor service to provide a comprehensive knowledge base of security best practices for development, testing, monitoring, and operations.\nThe Defender Advisor can be used as a checklist to prioritize efforts in implementing project security. Each security best practice in Defender Advisor is rated for criticality and effort, and contains examples for implementation. This allows you to evaluate your current security practices against established best practices, prioritize additional best practices to implement, and improve security training and awareness within your development and operations teams.\nThe best practice articles in Defender Advisor are organized into four categories: Development, Monitoring, Testing and Operations. Each article is also rated for the importance of the best practice, either Critical, High, or Normal. Additionally, each article is identified for the expected effort to implement, which can be Large, Medium, or Small. With the controls on the column headers, you can filter and sort the list of articles to find the specific best practices that are most relevant to your project.\n"
        }
      ],
      "questions": [
        {
          "uuid": "53087795-3805-4252-9d05-0d64b86715d0",
          "type": "SingleChoice",
          "content": "What is the main function of the Defender admin?",
          "hint": "NoHint",
          "explanation": "The Defender admin serves as a centralized platform for managing all of our smart contracts. It offers the capability to create multi-signature wallets instantly, which can be utilized for signing transactions and proposals.",
          "answerKeys": [
            "A"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "To manage smart contracts",
              "key": "A"
            },
            {
              "content": "To create multisignature wallets",
              "key": "B"
            },
            {
              "content": "To provide notifications for events within the smart contract",
              "key": "C"
            },
            {
              "content": "To simplify the process of smart contract development",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "2aa1ac4f-72bc-4576-b1fb-ce7dcffc9db6",
          "type": "SingleChoice",
          "content": "What kind of wallets can be created instantly using the Defender admin?",
          "hint": "Gnosis safe",
          "explanation": "Multisignature wallets can be created instantly using defender admin.",
          "answerKeys": [
            "D"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "Upgradeable wallets",
              "key": "A"
            },
            {
              "content": "Single signature wallets",
              "key": "B"
            },
            {
              "content": "Timelock wallets",
              "key": "C"
            },
            {
              "content": "Multisignature wallets",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "8dd3a002-0724-4eef-8f9f-6208204713e1",
          "type": "SingleChoice",
          "content": "What is the purpose of timelocks in the Defender admin?",
          "hint": "Delay",
          "explanation": "Timelocks are smart contracts that allow for the delay of proposals or function calls in the target contract.",
          "answerKeys": [
            "B"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "To manage and oversee the actions of both proposers and executors",
              "key": "A"
            },
            {
              "content": "To delay proposals or function calls in the target contract",
              "key": "B"
            },
            {
              "content": "To sign transactions and proposals",
              "key": "C"
            },
            {
              "content": "To upgrade smart contracts",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "aae91594-bd07-4a7d-8383-e7933d70e343",
          "type": "SingleChoice",
          "content": "What is the main function of the defender autotask feature?",
          "hint": "NoHint",
          "explanation": "The defender autotask feature enables users to run javascript snippets on a schedule, or trigger them in response to sentinel events or public webhooks.",
          "answerKeys": [
            "D"
          ],
          "difficultyLevel": "Low",
          "choices": [
            {
              "content": "To run javascript snippets on a schedule",
              "key": "A"
            },
            {
              "content": "To run javascript snippets in response to sentinel events",
              "key": "B"
            },
            {
              "content": "To integrate with third-party services",
              "key": "C"
            },
            {
              "content": "Both A and B",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "66d58f41-9213-4075-846b-5afa04bc0f28",
          "type": "SingleChoice",
          "content": "What is the use of webhook feature in Autotasks?",
          "hint": "NoHint",
          "explanation": "Defender will create a secret URL for your Autotask, and invoke it whenever an HTTP request is posted to that endpoint. You can regenerate this URL at any time.",
          "answerKeys": [
            "B"
          ],
          "difficultyLevel": "High",
          "choices": [
            {
              "content": "To run Autotasks at a specific time",
              "key": "A"
            },
            {
              "content": "To create a secret URL for Autotasks and invoke it whenever an HTTP request is posted",
              "key": "B"
            },
            {
              "content": "To execute functions or multiple functions in response to a sentinel or an event",
              "key": "C"
            },
            {
              "content": "To provide gasless transactions for dapp users",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "f8b85c8f1-23ee-451a-9392-139b1a8d7c46",
          "type": "SingleChoice",
          "content": "What is required for the upgradability feature to be available in the Defender admin?",
          "hint": "NoHint",
          "explanation": "Upgradeability is only possible for contracts that implement the EIP-1967 standard, which is verified during the import process.",
          "answerKeys": [
            "A"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "The contract must implement the EIP-1967 standard and the deployed address should be provided",
              "key": "A"
            },
            {
              "content": "The contract's ABI must include the pause() and unpause() functions",
              "key": "B"
            },
            {
              "content": "The contract must have the “grantRole” and “RevokeRole” functions",
              "key": "C"
            },
            {
              "content": "The contract must be added to the admin dashboard",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "ca04f52f-7d06-4256-8961-f83a988e43b6",
          "type": "SingleChoice",
          "content": "What is a batch proposal?",
          "hint": "NoHint",
          "explanation": "A batch proposal refers to a single transaction that includes multiple function calls from one or more contracts. This feature allows for the atomic execution of multiple actions.",
          "answerKeys": [
            "C"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "A proposed transaction stored in a digital ledger",
              "key": "A"
            },
            {
              "content": "An executable program to perform multiple transactions",
              "key": "B"
            },
            {
              "content": "A single transaction that includes multiple function calls from one or more contracts",
              "key": "C"
            },
            {
              "content": "An application to route transactions from one address to another",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "111cf406-bdea-4fbd-b0f4-77033c0125fb",
          "type": "SingleChoice",
          "content": "Who is responsible for scheduling and canceling operations with Timelocks?",
          "hint": "NoHint",
          "explanation": "The individuals designated as proposers are responsible for scheduling and canceling operations, while executors handle the execution of these operations.",
          "answerKeys": [
            "A"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "Proposers",
              "key": "A"
            },
            {
              "content": "Gnosis Safe",
              "key": "B"
            },
            {
              "content": "Admin",
              "key": "C"
            },
            {
              "content": "Executors",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "05f2bac3-41cc-4868-a096-733e8f3c9b17",
          "type": "SingleChoice",
          "content": "What is the most suitable condition for an auto-tasking code snippet?",
          "hint": "NoHint",
          "explanation": "The code snippet must export a handler function and each auto task must be powered by AWS Lambda.",
          "answerKeys": [
            "A"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "The code snippet must export a handler function",
              "key": "A"
            },
            {
              "content": "The code snippet must be powered by AWS EC2",
              "key": "B"
            },
            {
              "content": "The code snippet must be powered by Google cloud",
              "key": "C"
            },
            {
              "content": "The code snippet must be powered by Azure",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "6758b6fd-9f01-45d2-848e-28def899ca11",
          "type": "SingleChoice",
          "content": "Which of the following is TRUE for a transaction to trigger a notification?",
          "hint": "NoHint",
          "explanation": "Transaction must have a To, From, or Address (from the log) that matches the configured address. The transaction condition should be matched if specified.",
          "answerKeys": [
            "B"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "The Transaction must directly invoke any of the selected Functions only",
              "key": "A"
            },
            {
              "content": "Transaction must have a To, From, or Address (from the log) that matches the configured address",
              "key": "B"
            },
            {
              "content": "Transaction must have a To address that matches the configured address",
              "key": "C"
            },
            {
              "content": "The Transaction must match the Transaction Condition only in case of contract sentinel",
              "key": "D"
            }
          ]
        },
        {
          "uuid": "d2caf7d1-24ea-4034-8598-fd737aee5bdc",
          "type": "SingleChoice",
          "content": "What type of service does Sentinel Services provide?",
          "hint": "NoHint",
          "explanation": "Sentinels Services provides a comprehensive monitoring solution for transactions on smart contracts. It allows you to establish conditions on events, functions, and transaction parameters, and detect direct calls, internal transactions, and events emitted by the contracts.",
          "answerKeys": [
            "D"
          ],
          "difficultyLevel": "Medium",
          "choices": [
            {
              "content": "Custom webhooks authorisation",
              "key": "A"
            },
            {
              "content": "Development support for serverless computing",
              "key": "B"
            },
            {
              "content": "Data streaming to Datadog",
              "key": "C"
            },
            {
              "content": "Comprehensive monitoring solution for transactions on smart contracts",
              "key": "D"
            }
          ]
        }
      ],
      "readings": [],
      "summaries": []
    }
  ]
}